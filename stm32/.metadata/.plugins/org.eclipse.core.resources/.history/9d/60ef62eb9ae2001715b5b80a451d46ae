/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"

/* USER CODE BEGIN Includes */
#include "stdlib.h"

#define ReceivedTabSize 2000
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
DAC_HandleTypeDef hdac;

TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
volatile int MAX = 0;
const float tp = 0.00001;
//const float pi2tp = 6.285*tp;
//volatile int freqTab[] = {500,3};
volatile int *freqTab = NULL;
volatile int *ampTab = NULL;
volatile int *phaseTab = NULL;
volatile int *freqTabRT = NULL;
volatile int *ampTabRT = NULL;
volatile int *phaseTabRT = NULL;
volatile int *freqTabTemp = NULL;
volatile int *ampTabTemp = NULL;
volatile int *phaseTabTemp = NULL;

volatile float out = 0;
volatile int licznik;

volatile int sample_iter = -1;

int r_size = 1;
volatile int output = 0;
volatile float cos;
volatile float wsp_a;
volatile float wsp_b;

volatile float vv;
volatile int bb;
volatile int aa;

int blad=0;

volatile int freq = 0;
volatile int Received;
volatile int ReceivedTab[ReceivedTabSize];

const float cosTable[360] = {
  -0.999847695156391270f, -0.999390827019095760f, -0.998629534754573830f,
  -0.997564050259824200f, -0.996194698091745550f, -0.994521895368273290f,
  -0.992546151641321980f, -0.990268068741570250f,
  -0.987688340595137660f, -0.984807753012208020f, -0.981627183447663980f,
  -0.978147600733805690f, -0.974370064785235250f, -0.970295726275996470f,
  -0.965925826289068200f, -0.961261695938318670f,
  -0.956304755963035440f, -0.951056516295153530f, -0.945518575599316740f,
  -0.939692620785908320f, -0.933580426497201740f, -0.927183854566787310f,
  -0.920504853452440150f, -0.913545457642600760f,
  -0.906307787036649940f, -0.898794046299167040f, -0.891006524188367790f,
  -0.882947592858926770f, -0.874619707139395740f, -0.866025403784438710f,
  -0.857167300702112220f, -0.848048096156425960f,
  -0.838670567945424160f, -0.829037572555041620f, -0.819152044288991580f,
  -0.809016994374947340f, -0.798635510047292940f, -0.788010753606721900f,
  -0.777145961456970680f, -0.766044443118977900f,
  -0.754709580222772010f, -0.743144825477394130f, -0.731353701619170460f,
  -0.719339800338651300f, -0.707106781186547460f, -0.694658370458997030f,
  -0.681998360062498370f, -0.669130606358858240f,
  -0.656059028990507500f, -0.642787609686539360f, -0.629320391049837280f,
  -0.615661475325658290f, -0.601815023152048380f, -0.587785252292473030f,
  -0.573576436351045830f, -0.559192903470746680f,
  -0.544639035015027080f, -0.529919264233204790f, -0.515038074910054270f,
  -0.499999999999999780f, -0.484809620246337000f, -0.469471562785890530f,
  -0.453990499739546750f, -0.438371146789077510f,
  -0.422618261740699330f, -0.406736643075800100f, -0.390731128489273600f,
  -0.374606593415912070f, -0.358367949545300270f, -0.342020143325668710f,
  -0.325568154457156420f, -0.309016994374947340f,
  -0.292371704722736660f, -0.275637355816999050f, -0.258819045102520850f,
  -0.241921895599667790f, -0.224951054343864810f, -0.207911690817759120f,
  -0.190808995376544800f, -0.173648177666930300f,
  -0.156434465040231040f, -0.139173100960065350f, -0.121869343405147370f,
  -0.104528463267653330f, -0.087155742747658235f, -0.069756473744125330f,
  -0.052335956242943620f, -0.034899496702500733f,
  -0.017452406437283477f, 0.000000000000000061f, 0.017452406437283376f,
  0.034899496702501080f, 0.052335956242943966f, 0.069756473744125455f,
  0.087155742747658138f, 0.104528463267653460f,
  0.121869343405147490f, 0.139173100960065690f, 0.156434465040230920f,
  0.173648177666930410f, 0.190808995376544920f, 0.207911690817759450f,
  0.224951054343864920f, 0.241921895599667900f,
  0.258819045102520740f, 0.275637355816999160f, 0.292371704722736770f,
  0.309016994374947450f, 0.325568154457156760f, 0.342020143325668820f,
  0.358367949545300380f, 0.374606593415911960f,
  0.390731128489273940f, 0.406736643075800210f, 0.422618261740699440f,
  0.438371146789077460f, 0.453990499739546860f, 0.469471562785890860f,
  0.484809620246337110f, 0.500000000000000110f,
  0.515038074910054380f, 0.529919264233204900f, 0.544639035015027200f,
  0.559192903470746790f, 0.573576436351046050f, 0.587785252292473140f,
  0.601815023152048270f, 0.615661475325658290f,
  0.629320391049837500f, 0.642787609686539360f, 0.656059028990507280f,
  0.669130606358858240f, 0.681998360062498480f, 0.694658370458997370f,
  0.707106781186547570f, 0.719339800338651190f,
  0.731353701619170570f, 0.743144825477394240f, 0.754709580222772010f,
  0.766044443118978010f, 0.777145961456970900f, 0.788010753606722010f,
  0.798635510047292830f, 0.809016994374947450f,
  0.819152044288991800f, 0.829037572555041620f, 0.838670567945424050f,
  0.848048096156425960f, 0.857167300702112330f, 0.866025403784438710f,
  0.874619707139395740f, 0.882947592858926990f,
  0.891006524188367900f, 0.898794046299167040f, 0.906307787036649940f,
  0.913545457642600870f, 0.920504853452440370f, 0.927183854566787420f,
  0.933580426497201740f, 0.939692620785908430f,
  0.945518575599316850f, 0.951056516295153530f, 0.956304755963035440f,
  0.961261695938318890f, 0.965925826289068310f, 0.970295726275996470f,
  0.974370064785235250f, 0.978147600733805690f,
  0.981627183447663980f, 0.984807753012208020f, 0.987688340595137770f,
  0.990268068741570360f, 0.992546151641321980f, 0.994521895368273290f,
  0.996194698091745550f, 0.997564050259824200f,
  0.998629534754573830f, 0.999390827019095760f, 0.999847695156391270f,
  1.000000000000000000f, 0.999847695156391270f, 0.999390827019095760f,
  0.998629534754573830f, 0.997564050259824200f,
  0.996194698091745550f, 0.994521895368273290f, 0.992546151641321980f,
  0.990268068741570360f, 0.987688340595137770f, 0.984807753012208020f,
  0.981627183447663980f, 0.978147600733805690f,
  0.974370064785235250f, 0.970295726275996470f, 0.965925826289068310f,
  0.961261695938318890f, 0.956304755963035440f, 0.951056516295153530f,
  0.945518575599316850f, 0.939692620785908430f,
  0.933580426497201740f, 0.927183854566787420f, 0.920504853452440370f,
  0.913545457642600870f, 0.906307787036649940f, 0.898794046299167040f,
  0.891006524188367900f, 0.882947592858926990f,
  0.874619707139395740f, 0.866025403784438710f, 0.857167300702112330f,
  0.848048096156425960f, 0.838670567945424050f, 0.829037572555041620f,
  0.819152044288991800f, 0.809016994374947450f,
  0.798635510047292830f, 0.788010753606722010f, 0.777145961456970900f,
  0.766044443118978010f, 0.754709580222772010f, 0.743144825477394240f,
  0.731353701619170570f, 0.719339800338651190f,
  0.707106781186547570f, 0.694658370458997370f, 0.681998360062498480f,
  0.669130606358858240f, 0.656059028990507280f, 0.642787609686539360f,
  0.629320391049837500f, 0.615661475325658290f,
  0.601815023152048270f, 0.587785252292473140f, 0.573576436351046050f,
  0.559192903470746790f, 0.544639035015027200f, 0.529919264233204900f,
  0.515038074910054380f, 0.500000000000000110f,
  0.484809620246337110f, 0.469471562785890860f, 0.453990499739546860f,
  0.438371146789077460f, 0.422618261740699440f, 0.406736643075800210f,
  0.390731128489273940f, 0.374606593415911960f,
  0.358367949545300380f, 0.342020143325668820f, 0.325568154457156760f,
  0.309016994374947450f, 0.292371704722736770f, 0.275637355816999160f,
  0.258819045102520740f, 0.241921895599667900f,
  0.224951054343864920f, 0.207911690817759450f, 0.190808995376544920f,
  0.173648177666930410f, 0.156434465040230920f, 0.139173100960065690f,
  0.121869343405147490f, 0.104528463267653460f,
  0.087155742747658138f, 0.069756473744125455f, 0.052335956242943966f,
  0.034899496702501080f, 0.017452406437283376f, 0.000000000000000061f,
  -0.017452406437283477f, -0.034899496702500733f,
  -0.052335956242943620f, -0.069756473744125330f, -0.087155742747658235f,
  -0.104528463267653330f, -0.121869343405147370f, -0.139173100960065350f,
  -0.156434465040231040f, -0.173648177666930300f,
  -0.190808995376544800f, -0.207911690817759120f, -0.224951054343864810f,
  -0.241921895599667790f, -0.258819045102520850f, -0.275637355816999050f,
  -0.292371704722736660f, -0.309016994374947340f,
  -0.325568154457156420f, -0.342020143325668710f, -0.358367949545300270f,
  -0.374606593415912070f, -0.390731128489273600f, -0.406736643075800100f,
  -0.422618261740699330f, -0.438371146789077510f,
  -0.453990499739546750f, -0.469471562785890530f, -0.484809620246337000f,
  -0.499999999999999780f, -0.515038074910054270f, -0.529919264233204790f,
  -0.544639035015027080f, -0.559192903470746680f,
  -0.573576436351045830f, -0.587785252292473030f, -0.601815023152048380f,
  -0.615661475325658290f, -0.629320391049837280f, -0.642787609686539360f,
  -0.656059028990507500f, -0.669130606358858240f,
  -0.681998360062498370f, -0.694658370458997030f, -0.707106781186547460f,
  -0.719339800338651300f, -0.731353701619170460f, -0.743144825477394130f,
  -0.754709580222772010f, -0.766044443118977900f,
  -0.777145961456970680f, -0.788010753606721900f, -0.798635510047292940f,
  -0.809016994374947340f, -0.819152044288991580f, -0.829037572555041620f,
  -0.838670567945424160f, -0.848048096156425960f,
  -0.857167300702112220f, -0.866025403784438710f, -0.874619707139395740f,
  -0.882947592858926770f, -0.891006524188367790f, -0.898794046299167040f,
  -0.906307787036649940f, -0.913545457642600760f,
  -0.920504853452440150f, -0.927183854566787310f, -0.933580426497201740f,
  -0.939692620785908320f, -0.945518575599316740f, -0.951056516295153530f,
  -0.956304755963035440f, -0.961261695938318670f,
  -0.965925826289068200f, -0.970295726275996470f, -0.974370064785235250f,
  -0.978147600733805690f, -0.981627183447663980f, -0.984807753012208020f,
  -0.987688340595137660f, -0.990268068741570250f,
  -0.992546151641321980f, -0.994521895368273290f, -0.996194698091745550f,
  -0.997564050259824200f, -0.998629534754573830f, -0.999390827019095760f,
  -0.999847695156391270f, -1.000000000000000000f
};

inline float cosApproximation(float v)
{
	float value = 0;

	uint16_t a = ((int) v) % 360;
	uint16_t b = (a + 1) % 360;

	float cos_a = cosTable[a];
	float cos_b = cosTable[b];
	wsp_a = cos_b - cos_a;
//	float wsp_a = cos_b - cos_a;
//	float wsp_b = cos_a - wsp_a * a;
	wsp_b = cos_a - wsp_a * a;

	value = wsp_a * (v - (int)(v) + a) + wsp_b;

		aa = a;
		vv = cos_a;
		bb = b;

	return value;
}

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM11_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	static long long int t = 0;
	int index = 0;

	float v;
//	float cos;

//	static int freqTab[] = {3};
//	static int ampTab[] = {20};
//	static int phaseTab[] = {0};

//	static int MAX = 1;
//	uint8_t data[50];

	 if(htim->Instance == TIM11){

		 HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,output);
//		 if(sample_iter == -1)
//		 {
//			 return;
//		 }
		 out = 0;
		 t=t+1;
		 for (int ii=0;ii<MAX;ii++)
		 {
			 v = 360 * tp * freqTab[ii]*t + 180 - phaseTab[ii];
			 cos = cosApproximation(v);
//			 cos = cosTable[((int) v) % 360];
			 out = out + ampTab[ii]*cos;
		 }

	 // skalowanie amplitudy -50 do 50 na od 0 do 4095
	 output = (int)(out*40.96 + 2048);
	 }
}

int power(int a)
{
	int wynik = 1;
	for (int i=0;i<a;i++)
		wynik *= 10;
	return wynik;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

	static int i=0;
//	volatile static int sample_iter = -1;
	static int liczbaProbek = -1;
	volatile static int idTab = 0;
	uint8_t data[50];
	uint16_t size = 0;

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

	if(Received == 9 || i==ReceivedTabSize) // zatwierdzenie liczby TABem
	{
		volatile int recNumber = 0;
		for (int k = 0;k < i;k++)
		{
			recNumber += power(i-k-1) * ReceivedTab[k];
		}
		i = 0;
//		size = sprintf(data, "echo:\t %u \n\r", recNumber);
//		HAL_UART_Transmit_IT(&huart2, data, size);
		if(sample_iter == -1)
		{
			size = sprintf(data, "lp:\t %u \n\r", recNumber);
			HAL_UART_Transmit_IT(&huart2, data, size);
			liczbaProbek = recNumber;
			MAX = liczbaProbek;
//			freqTabRT = (int *) malloc(liczbaProbek*sizeof(int));
//			ampTabRT = (int *) malloc(liczbaProbek*sizeof(int));
//			phaseTabRT = (int *) malloc(liczbaProbek*sizeof(int));
//			if(freqTab == NULL || ampTab == NULL || phaseTab == NULL) {
//				size = sprintf(data, "blad");
//				HAL_UART_Transmit_IT(&huart2, data, size);
//			}
			sample_iter = 0;
		}
		else
		{
//			size = sprintf(data, "echoProbki:\t %u \n\r", recNumber);
//			HAL_UART_Transmit_IT(&huart2, data, size);
			if(sample_iter%3 == 0) // freq
			{
				freqTabRT[idTab] =  recNumber;
				freq = recNumber;
			}
			else if(sample_iter%3 == 1) // amp
			{
				ampTabRT[idTab] = recNumber;
			}
			else if(sample_iter%3 == 2) // phase
			{
				phaseTabRT[idTab] = recNumber;
				idTab++;
			}
			sample_iter += 1;
			size = sprintf(data, "sampleIter:\t %d \n\r", sample_iter);
			HAL_UART_Transmit_IT(&huart2, data, size);
//			size = sprintf(data, "idTab:\t %d \n\r", idTab);
//			HAL_UART_Transmit_IT(&huart2, data, size);
		}
		if(idTab == liczbaProbek)
		{
//			free(freqTab);
//			free(ampTab);
//			free(phaseTab);
			freqTabTemp = freqTab;
			ampTabTemp = ampTab;
			phaseTabTemp = phaseTab;

			freqTab = freqTabRT;
			ampTab = ampTabRT;
			phaseTab = phaseTabRT;

			freqTabRT = freqTabTemp;
			ampTabRT = ampTabTemp;
			phaseTabRT = phaseTabTemp;


 			size = sprintf(data, "koniec \n\r");
			HAL_UART_Transmit_IT(&huart2, data, size);
			sample_iter = -1;
			idTab = 0;
		}

	}
	else
	{
			ReceivedTab[i] = atoi(&Received);
			i++;
	}


	 HAL_UART_Receive_IT(&huart2, &Received, r_size);
}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM11_Init();
  MX_DAC_Init();
  MX_TIM6_Init();

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim11);
  HAL_TIM_Base_Start_IT(&htim6);
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
  HAL_UART_Receive_IT(&huart2, &Received, r_size);

//  *freqTab = (int *) malloc(100 * sizeof(int));
//  *ampTab = (int *) malloc(100 * sizeof(int));
//  *phaseTab = (int *) malloc(100 * sizeof(int));
//  *freqTabRT = (int *) malloc(100 * sizeof(int));
//  *ampTabRT = (int *) malloc(100 * sizeof(int));
//  *phaseTabRT = (int *) malloc(100 * sizeof(int));
  *freqTab = (int*) calloc (10 , sizeof(int));
    *ampTab = (int *) calloc (10 , sizeof(int));
    *phaseTab = (int *) calloc (10 , sizeof(int));
    *freqTabRT = (int *) calloc (10 , sizeof(int));
    *ampTabRT = (int *) calloc (10 , sizeof(int));
    *phaseTabRT = (int *) calloc (10 , sizeof(int));

  uint8_t data[50];
	uint16_t size = 0;
	if(freqTab == NULL || ampTab == NULL || phaseTab == NULL) {
		blad = 1;
	}
	if(freqTabRT == NULL || ampTabRT == NULL || phaseTabRT == NULL) {
			blad = 2;
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
 }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* DAC init function */
static void MX_DAC_Init(void)
{

  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization 
    */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**DAC channel OUT1 config 
    */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* TIM6 init function */
static void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 9;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 999;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* TIM11 init function */
static void MX_TIM11_Init(void)
{

  TIM_OC_InitTypeDef sConfigOC;

  htim11.Instance = TIM11;
  htim11.Init.Prescaler = 99;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 9;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
     PC3   ------> I2S2_SD
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
     PB10   ------> I2S2_CK
     PC7   ------> I2S3_MCK
     PA9   ------> USB_OTG_FS_VBUS
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
